services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: chutes
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - kind

  redis:
    image: redis:7
    ports:
      - "127.0.0.1:6379:6379"
    command: ["redis-server", "--requirepass", "redispassword"]
    environment:
      - REDIS_PASSWORD=redispassword
    networks:
      - kind

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - kind

  registry:
    image: registry:2
    environment:
      REGISTRY_STORAGE: s3
      REGISTRY_STORAGE_S3_REGION: local
      REGISTRY_STORAGE_S3_BUCKET: chutes
      REGISTRY_STORAGE_S3_ACCESSKEY: minioadmin
      REGISTRY_STORAGE_S3_SECRETKEY: minioadmin
      REGISTRY_STORAGE_S3_REGIONENDPOINT: http://minio:9000
      REGISTRY_HTTP_SECRET: "registry"
    depends_on:
      - minio
    networks:
      - kind

  registry_public:
    image: nginx
    ports:
      - "5100:5100"
    volumes:
      - ./data/registry-auth-nginx.conf:/etc/nginx/nginx.conf
    networks:
      - kind

  kind:
    image: docker:latest
    entrypoint: /bin/sh -c
    command: |
      "if [ ! -f '/root/.kube/config' ]; then apk add --no-cache curl &&
      curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.24.0/kind-linux-amd64 &&
      chmod +x ./kind &&
      mv ./kind /usr/local/bin/kind &&
      cat <<EOF > kind-config.yaml
      kind: Cluster
      apiVersion: kind.x-k8s.io/v1alpha4
      networking:
        apiServerAddress: '0.0.0.0'
        apiServerPort: 6443
      nodes:
        - role: control-plane
          extraMounts:
            - containerPath: /var/run/docker.sock
              hostPath: /var/run/docker.sock
      EOF
      (kind create cluster --name chutes --config kind-config.yaml || true) &&
      mkdir -p /kubeconfig &&
      kind get kubeconfig --name chutes --internal > /root/.kube/config &&
      chmod 644 /root/.kube/config; fi &&
      tail -f /dev/null"
    privileged: true
    volumes:
      - kind_data:/var/lib/docker
      - kube_config:/root/.kube
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - kind

  api:
    build:
      context: .
      target: api
    volumes:
      - ./metasync:/app/metasync
      - ./api:/app/api
      - ./data:/app/data
      - kube_config:/home/chutes/.kube
    environment:
      - POSTGRESQL=postgresql+asyncpg://user:password@postgres:5432/chutes
      - REDIS_URL=redis://:redispassword@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - STORAGE_BUCKET=chutes
      - REGISTRY_PASSWORD=registry
      - REGISTRY_INSECURE=true
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - minio
      - kind
      - registry
      - vault
    networks:
      - kind

  payment_watcher:
    build:
      context: .
      target: api
    volumes:
      - ./:/app
      - kube_config:/home/chutes/.kube
    environment:
      - POSTGRESQL=postgresql+asyncpg://user:password@postgres:5432/chutes
      - REDIS_URL=redis://:redispassword@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - STORAGE_BUCKET=chutes
      - REGISTRY_PASSWORD=registry
      - REGISTRY_INSECURE=true
    entrypoint: ["poetry", "run", "uvicorn", "api.payment.watcher:app", "--host", "0.0.0.0", "--port", "8222", "--reload"]
    ports:
      - "8222:8222"
    depends_on:
      - postgres
      - redis
      - minio
      - kind
      - registry
    networks:
      - kind

  forge:
    build:
      context: .
      target: forge
    environment:
      - POSTGRESQL=postgresql+asyncpg://user:password@postgres:5432/chutes
      - REDIS_URL=redis://:redispassword@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - STORAGE_BUCKET=chutes
      - REGISTRY_PASSWORD=registry
      - REGISTRY_INSECURE=true
      - PYTHONPATH=/forge

      # Environment variables specific to buildah
      - STORAGE_DRIVER=vfs
      - BUILDAH_FORMAT=docker
      - BUILDAH_ISOLATION=chroot
    depends_on:
      - postgres
      - redis
      - minio
      - registry
    cap_add:
      - SETUID
      - SETGID
      - SYS_ADMIN
    security_opt:
      - seccomp:./data/forge-seccomp.json
      - apparmor:unconfined
      - label:disable
    networks:
      - kind

  metasync:
    build:
      context: .
      target: metasync
    volumes:
      - ./:/app
    environment:
      - POSTGRESQL=postgresql+asyncpg://user:password@postgres:5432/chutes
      - REDIS_URL=redis://:redispassword@redis:6379/0
    depends_on:
      - postgres
      - redis
    networks:
      - kind

  vault:
    image: vault:1.13.3
    ports:
      - "777:777"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=supersecrettoken
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:777
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
    command: vault server -dev
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kind

volumes:
  postgres_data:
  minio_data:
  kind_data:
  kube_config:
  vault_data:

networks:
  kind:
    external: true
    name: kind
