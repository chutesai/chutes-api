apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry
  labels:
    {{- include "registry.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.registry.replicaCount }}
  selector:
    matchLabels:
      {{- include "registry.labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "registry.labels" . | nindent 8 }}
    spec:
      {{- with .Values.registry.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.registry.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.registry.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: registry
          image: "{{ .Values.registry.image }}"
          imagePullPolicy: {{ .Values.registry.imagePullPolicy }}
          env:
            - name: REGISTRY_STORAGE
              value: {{ .Values.registry.config.type }}
            {{- if eq .Values.registry.config.type "s3" }}
            - name: REGISTRY_STORAGE_S3_REGION
              valueFrom:
                secretKeyRef:
                  name: registry-s3
                  key: aws-region
            - name: REGISTRY_STORAGE_S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: registry-s3
                  key: bucket
            - name: REGISTRY_STORAGE_S3_ACCESSKEY
              valueFrom:
                secretKeyRef:
                  name: registry-s3
                  key: access-key-id
            - name: REGISTRY_STORAGE_S3_SECRETKEY
              valueFrom:
                secretKeyRef:
                  name: registry-s3
                  key: secret-access-key
            - name: REGISTRY_STORAGE_S3_REGIONENDPOINT
              valueFrom:
                secretKeyRef:
                  name: registry-s3
                  key: endpoint-url
            - name: REGISTRY_STORAGE_S3_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: registry-s3
                  key: endpoint
            - name: REGISTRY_STORAGE_S3_FORCEPATHSTYLE
              value: "true"
            - name: REGISTRY_STORAGE_S3_V4AUTH
              value: "true"
            {{- else if eq .Values.registry.config.type "gcs" }}
            - name: REGISTRY_STORAGE_GCS_BUCKET
              valueFrom:
                secretKeyRef:
                  name: gcs-credentials
                  key: bucket
            - name: REGISTRY_STORAGE_GCS_KEYFILE
              value: "/etc/gcs/credentials.json"
            {{- end }}
            - name: REGISTRY_HTTP_SECRET
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: password
            - name: REGISTRY_STORAGE_REDIRECT_DISABLE
              value: "{{ .Values.registry.config.redirectDisable }}"
          {{- if eq .Values.registry.config.type "gcs" }}
          volumeMounts:
            - name: gcs-credentials
              mountPath: "/etc/gcs"
              readOnly: true
          {{- end }}
          ports:
            - name: registry
              containerPort: {{ .Values.registry.service.port }}
              protocol: TCP
          resources:
            {{- toYaml .Values.registry.resources | nindent 12 }}
      {{- if eq .Values.registry.config.type "gcs" }}
      volumes:
        - name: gcs-credentials
          secret:
            secretName: gcs-credentials
            items:
              - key: credentials.json
                path: credentials.json
      {{- end }}
